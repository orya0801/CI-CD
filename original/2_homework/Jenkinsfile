pipeline {
  agent {
    label 'docker'
  }


  options {
    buildDiscarder logRotator(numToKeepStr: '5')
    timestamps()
  }

  parameters {
    choice choices: ['orel', 'orel-test'], name: 'NAMESPACE'
  }

  stages {

    stage('Build'){

      steps {
        echo "Starting Build Stage!"

        withDockerRegistry(credentialsId: 'dockerhub', url: 'https://index.docker.io/v1/') {
            sh '''
            docker build -t orya0801/javaapp:1.0.0 -t orya0801/javaapp:latest ./original/2_homework/
            docker push orya0801/javaapp:1.0.0
            docker push orya0801/javaapp:latest
            '''
        }

      }
      
    }


    stage('Tests'){
      parallel {
        stage('Trivy Scan'){

          steps {
            echo "Starting Trivy Scan Stage!"
            sh '''
            wget https://github.com/knqyf263/trivy/releases/download/v0.0.13/trivy_0.0.13_Linux-64bit.tar.gz
            tar zxvf trivy_0.0.13_Linux-64bit.tar.gz
            #./trivy --exit-code 0 --severity HIGH orya0801/javaapp:1.0.0
            '''
          }
        }  

        stage('Test'){

          // agent {
          //   docker {
          //     image 'maven:3-alpine'
          //     label 'docker'
          //   }
          // }

          steps {
            echo "Starting Test Stage!"
            // sh 'mvn test'
          }

          // post {
          //   always {
          //     recordIssues(
          //       enabledForFailure: true,
          //       tools: [
          //         junitParser(pattern: '**/original/2_homework/*.xml')
          //       ]
          //     )
          //   }
          // }
        }
      }
    }
    
    stage('Install Helm') {
      steps{
        echo "INSTALLING HELM"
        sh'''
        git clone https://github.com/helm/helm.git
        cd helm
        make
        '''
      }
    }

    stage('Deploy'){
      input {
        message 'Do you want to deploy to production?'
      }

      steps {
        sh '''
        echo DEPLOYING TO $NAMESPACE
        '''

        withCredentials([kubeconfigFile(credentialsId:'kubeconfig', variable: 'KUBECONFIG')]) {
          sh 'helm install -n $NAMESPACE./original/2_homework/helm-chart'
        }
      }
      
    }
  }
}