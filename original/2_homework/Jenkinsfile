pipeline {
    agent {
        label 'docker'
    }

    environment {
        DEFAULT_DIR = './2_homework'
        IMAGE_REPO = 'orya0801/javaapp'
        TAG = '1.0.0'
    }

    stages {
        stage("Build") {
            steps {
                sh '''
                printenv
                docker pull $IMAGE_REPO:latest || true
                docker build --cache-from $IMAGE_REPO:latest -t $IMAGE_REPO:$TAG-$GIT_COMMIT -t $IMAGE_REPO:latest $DEFAULT_DIR
                '''

                withDockerRegistry(credentialsId: 'dockerhub', url: 'https://index.docker.io/v1/') {
                    sh '''
                    docker push $IMAGE_REPO:$TAG-$GIT_COMMIT
                    docker push $IMAGE_REPO:latest
                    '''
                }
            }
        }

        stage("Tests") {
            when {
                // not {
                //     environment name: 'GIT_BRANCH', value: 'origin/master'
                // }
                environment name: 'GIT_BRANCH', value: 'origin/master'
            }
            parallel {
                stage("Unit Tests") {
                    agent {
                        docker {
                            image 'maven:3-alpine'
                            label 'docker'
                        }
                    }

                    steps {
                        sh 'cd $DEFAULT_DIR'
                        sh 'mvn test'
                    }

                    post {
                        always {
                            recordIssues(
                                enabledForFailure: true,
                                tools: [junitParser(pattern: '**/reports/*.xml')]
                            )
                        }
                    }
                }

                stage("Security Scanning") {
                    agent {
                        docker {
                            image 'aquasec/trivy'
                            label 'docker'
                            args '--entrypoint='
                        }
                    }
                    steps {
                        sh 'trivy --cache-dir .trivycache/ -f json -o trivy.json $IMAGE_REPO:$TAG-$GIT_COMMIT'
                    }
                    post {
                        always {
                            recordIssues(
                                enabledForFailure: true,
                                tools: [trivy(pattern: '**/trivy.json')]
                            )
                        }
                    }
                }
            }
        }

        stage("Deploy") {
            agent {
                docker {
                    image 'alpine/helm'
                    label 'docker'
                    args '--entrypoint='
                }
            }

            input {
                message 'Do you want to deploy on Production?'
                parameters {
                    choice choices: ['orel', 'orel-test'], name: 'NAMESPACE'
                }
            }

            steps {
                withCredentials([kubeconfigFile(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh 'helm -n $NAMESPACE upgrade --install --wait --atomic java-app ./$DEFAULT_DIR/helm-chart/ --set container.image=$IMAGE_REPO --set container.tag=$TAG-$GIT_COMMIT'
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}